#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>
#include <chrono>
#include <cstdlib> // for rand() and srand()
#include <ctime>   // for time()

using namespace std;

class Graph {
private:
    int V;                 // Number of vertices
    vector<vector<int>> adj; // Adjacency list
    vector<int> bfsPath;    // Stores the BFS traversal path

public:
    Graph(int V) : V(V), adj(V) {}

    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }

    // Sequential Breadth-First Search
    void sequentialBFS(int startVertex) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
            int v = q.front();
            q.pop();
            bfsPath.push_back(v); // Store the visited node

            for (int i = 0; i < adj[v].size(); ++i) {
                int n = adj[v][i];
                if (!visited[n]) {
                    visited[n] = true;
                    q.push(n);
                }
            }
        }
    }

    // Parallel Breadth-First Search
    void parallelBFS(int startVertex) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[startVertex] = true;
        q.push(startVertex);

        while (!q.empty()) {
            int v = q.front();
            q.pop();
            bfsPath.push_back(v); // Store the visited node

#pragma omp parallel for
            for (int i = 0; i < adj[v].size(); ++i) {
                int n = adj[v][i];
                if (!visited[n]) {
                    visited[n] = true;
                    q.push(n);
                }
            }
        }
    }

    // Get the BFS traversal path
    vector<int> getBFSPath() {
        return bfsPath;
    }

    // Clear the BFS traversal path
    void clearBFSPath() {
        bfsPath.clear();
    }
};

int main() {
    srand(time(NULL)); // Initialize random seed

    int num_vertices;
    cout << "Enter the number of vertices: ";
    cin >> num_vertices;

    int num_edges = rand() % (num_vertices * (num_vertices - 1) / 2); // Random number of edges (0 to V*(V-1)/2)
    int source = rand() % num_vertices; // Random source node

    Graph g(num_vertices);

    // Generate random edges
    for (int i = 0; i < num_edges; ++i) {
        int u = rand() % num_vertices; // Random source vertex
        int v = rand() % num_vertices; // Random destination vertex
        g.addEdge(u, v);
    }

    // Measure sequential BFS time
    auto startSeqBFS = chrono::steady_clock::now();
    g.sequentialBFS(source);
    auto endSeqBFS = chrono::steady_clock::now();
    double timeSeqBFS = chrono::duration<double>(endSeqBFS - startSeqBFS).count() * 1000; // Convert to milliseconds

    // Measure parallel BFS time
    auto startParBFS = chrono::steady_clock::now();
    g.parallelBFS(source);
    auto endParBFS = chrono::steady_clock::now();
    double timeParBFS = chrono::duration<double>(endParBFS - startParBFS).count() * 1000; // Convert to milliseconds

    // Output BFS calculation times
    cout << "Number of vertices: " << num_vertices << endl;
    cout << "Number of edges: " << num_edges << endl;
    cout << "Source node: " << source << endl;
    cout << "Sequential BFS Time: " << timeSeqBFS << " milliseconds" << endl;
    cout << "Parallel BFS Time: " << timeParBFS << " milliseconds" << endl;

    // Get and print the BFS traversal path
    vector<int> bfsPath = g.getBFSPath();
    cout << "BFS Path: ";
    for (int i = 0; i < bfsPath.size(); ++i) {
        cout << bfsPath[i] << " ";
    }
    cout << endl;

    // Clear the BFS traversal path for next computation
    g.clearBFSPath();

    return 0;
}
