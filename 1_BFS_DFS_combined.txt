#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

class Graph {
private:
    int V; // Number of vertices
    vector<vector<int> > adj; // Adjacency list

public:
    Graph(int V) : V(V), adj(V) {}

    void addEdge(int v, int w) {
        adj[v].push_back(w);
    }

    void parallelBFS(int startVertex) {
        vector<bool> visited(V, false);
        queue<int> q;
        q.push(startVertex);
        visited[startVertex] = true;

        while (!q.empty()) {
            int size = q.size();

#pragma omp parallel for
            for (int i = 0; i < size; ++i) {
                int v = q.front();
                q.pop();
                cout << v << " ";
                for (int j = 0; j < adj[v].size(); ++j) {
                    int u = adj[v][j];
                    if (!visited[u]) {
#pragma omp critical
                        {
                            visited[u] = true;
                            q.push(u);
                        }
                    }
                }
            }
        }
    }

    void parallelDFSUtil(int v, vector<bool> &visited) {
        visited[v] = true;
        cout << v << " ";
#pragma omp parallel for
        for (int i = 0; i < adj[v].size(); ++i) {
            int n = adj[v][i];
            if (!visited[n]) {
                parallelDFSUtil(n, visited);
            }
        }
    }

    void parallelDFS(int startVertex) {
        vector<bool> visited(V, false);
        parallelDFSUtil(startVertex, visited);
    }
};

int main() {
    int num_vertices, num_edges, source;
    cout << "Enter number of vertices, edges, and source node: ";
    cin >> num_vertices >> num_edges >> source;

    // Input validation
    if (source < 0 || source >= num_vertices) {
        cout << "Invalid source node!" << endl;
        return 1;
    }

    Graph g(num_vertices);

    cout << "Enter the edges (source, destination):" << endl;
    for (int i = 0; i < num_edges; ++i) {
        int u, v;
        cin >> u >> v;
        // Input validation for edges
        if (u < 0 || u >= num_vertices || v < 0 || v >= num_vertices) {
            cout << "Invalid edge: (" << u << ", " << v << ")" << endl;
            return 1;
        }
        g.addEdge(u, v);
    }

    cout << "Parallel Depth-First Search (DFS): ";
    g.parallelDFS(source);
    cout << endl;

    cout << "Parallel Breadth-First Search (BFS): ";
    g.parallelBFS(source);
    cout << endl;

    return 0;
}
